"use client";
import Image from "next/image";
import React, { useState } from "react";
import s from "./Payment.module.scss";
import cardImg from "@/assets/card-img.svg";
import visa from "@/assets/visa.svg";
import { SubmitHandler, useForm } from "react-hook-form";
import {
  useCreateVisaCartMutation,
  useGetVisaCartQuery,
} from "@/redux/api/product";
import { useGetUserQuery } from "@/redux/api/auth";

const Payment = () => {
  const [addCart, setAddCart] = useState(false);
  const { register, handleSubmit, setValue, reset } =
    useForm<PRODUCT.PostCreateVisaCartRequest>();
  const [createVisaCart] = useCreateVisaCartMutation();
  const { data } = useGetVisaCartQuery();
  console.log("üöÄ ~ Payment ~ data:", data);
  const { data: user } = useGetUserQuery();

  const [selectedPayment, setSelectedPayment] = useState<string | null>();

  const handleCheckboxChange = (value: string) => {
    setSelectedPayment(value);
    setValue("bank_cart", value);
  };

  const onSubmit: SubmitHandler<PRODUCT.PostCreateVisaCartRequest> = async (
    data
  ) => {
    console.log(data);
    try {
      const newData = {
        user: user[0].id,
        bank_cart: selectedPayment,
        number_cart: data.number_cart,
        graduation_date: data.graduation_date,
        csv: data.csv,
      };
      const result = await createVisaCart(newData);
      console.log("üöÄ ~ Payment ~ result:", result);
      reset();
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <div className={s.payment}>
      <h1>–ü–ª–∞—Ç–µ–∂–Ω—ã–µ –∫–∞—Ä—Ç—ã</h1>
      <div className={s.cards}>
        {data?.map((el) => (
          <div key={el.id} className={s.card}>
            <h2>{el.bank_cart} Classic</h2>
            <Image src={cardImg} alt="img" />
            <h4>{el.number_cart}</h4>
            <span>{el.graduation_date}</span>
            <Image src={visa} alt="img" className={s.visa} />
          </div>
        ))}
      </div>
      <div className={s.addCard}>
        {addCart ? (
          <form onSubmit={handleSubmit(onSubmit)} noValidate>
            <div className={s.number}>
              <h1 className={s.inputText}>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã *</h1>
              <input
                {...register("number_cart", {
                  required: "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
                  pattern: {
                    value: /^[0-9]{16}$/,
                    message: "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã",
                  },
                })}
                type="text"
                className={s.input}
              />
            </div>
            <div className={s.checkBoxes}>
              <div className={s.checkBox}>
                <input
                  type="radio"
                  id="visa"
                  name="payment_type"
                  className={s.customCheckbox}
                  checked={selectedPayment === "visa"}
                  onChange={() => handleCheckboxChange("visa")}
                />
                <label htmlFor="visa">Visa</label>
              </div>
              <div className={s.checkBox}>
                <input
                  type="radio" // Changed from checkbox to radio for single selection
                  id="mastercard"
                  name="payment_type"
                  className={s.customCheckbox}
                  checked={selectedPayment === "mastercard"}
                  onChange={() => handleCheckboxChange("mastercard")}
                />
                <label htmlFor="mastercard">MasterCard</label>
              </div>
            </div>
            <div className={s.cardCode}>
              <div className={s.year}>
                <h1 className={s.inputText}>–ú–ú/–ì–ì *</h1>
                <input
                  {...register("graduation_date", {
                    required: "–î–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞",
                  })}
                  type="date"
                  className={s.input}
                />
              </div>
              <div className={s.year}>
                <h1 className={s.inputText}>CVC *</h1>
                <input
                  {...register("csv", {
                    required: "CVC –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
                    pattern: {
                      value: /^[0-9]{3,4}$/,
                      message: "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π CVC –∫–æ–¥",
                    },
                  })}
                  type="number"
                  className={s.input}
                />
              </div>
            </div>
            <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É</button>
          </form>
        ) : (
          <>
            <h1>–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É</h1>
            <p>
              –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
              –≤—Ä—É—á–Ω—É
            </p>
            <button onClick={() => setAddCart(true)}>–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É</button>
            <p>
              –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ä—Ç—ã –±—É–¥–µ—Ç —Å–Ω—è—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ 1$.
              –°—É–º–º–∞ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤–∞–º –∞ —Ç–µ—á–µ–Ω–∏–∏ 48 —á–∞—Å–æ–≤
            </p>
          </>
        )}
      </div>
    </div>
  );
};

export default Payment;
